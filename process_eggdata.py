from __future__ import division
import csv
import itertools
import math

# represents one line of the log file
class Reading(object):
	def __init__(self, d):
		self.r = int(d['r'])
		self.g = int(d['g'])
		self.w = int(d['w'])
		self.a = int(d['a'])

		self.actual = d['egg']


	def __repr__(self):
		return "<{s.actual} - r:{s.r} g:{s.g} w:{s.w} a:{s.a}>".format(s=self)

# normalized to remove ambient light
class NormReading(object):
	def __init__(self, r=0, g=0, w=0):
		self.r = r
		self.g = g
		self.w = w

	@classmethod
	def of(cls, r):
		return cls(
			r=(r.r - r.a) / r.a,
			g=(r.g - r.a) / r.a,
			w=(r.w - r.a) / r.a
		)

	def __repr__(self):
		return "<r:{s.r: .3f} g:{s.g: .3f} w:{s.w: .3f}>".format(s=self)



order = ["none", "white", "brown", "cream"]

# load the old file
with open('eggdataback.csv') as f:
	data = [Reading(r) for r in csv.DictReader(f)]

stats = {}

# find mean and variance
# TODO: covariance?
for t, rs in itertools.groupby(data, key=lambda e: e.actual):
	rs = list(rs)

	mean = NormReading()
	mean_sq = NormReading()

	for r in rs:
		nr = NormReading.of(r)

		mean.r += nr.r
		mean.g += nr.g
		mean.w += nr.w

		mean_sq.r += nr.r * nr.r
		mean_sq.g += nr.g * nr.g
		mean_sq.w += nr.w * nr.w

	mean.r /= len(rs)
	mean.g /= len(rs)
	mean.w /= len(rs)

	mean_sq.r /= len(rs)
	mean_sq.g /= len(rs)
	mean_sq.w /= len(rs)

	var = NormReading(
		r=mean_sq.r - (mean.r*mean.r),
		g=mean_sq.g - (mean.g*mean.g),
		w=mean_sq.w - (mean.w*mean.w)
	)

	stats[t] = (mean, var)


# output the c file we need
top_template = '''\
// Autogenerated file
#include "egg_stats.h"

using namespace egg_stats;

EggExpectation egg_stats::expectations[EGG_TYPE_COUNT] = {{
	{0}
}};
'''

single_template = '''\
// {name}
(EggExpectation) {{
	(NormValue) {{{mean.r}, {mean.g}, {mean.w}}},
	(NormValue) {{{var.r}, {var.g}, {var.w}}}
}}'''

text = top_template.format(
	',\n'.join(
		single_template.format(mean=stats[name][0], var=stats[name][1], name=name)
		for name in order
	).replace('\n', '\n\t')
)


with open("egg_stats.cc", "w") as f:
	print >> f, text
