import csv
import itertools
import numpy as np

# represents one line of the log file
class Reading(object):
	def __init__(self, d):
		self.c = np.array([int(d[k]) for k in 'rgwa'])
		self.actual = d['egg']

	def __repr__(self):
		return "<{s.actual} - rgwa:{s.c}>".format(s=self)

# load the old file
with open('eggdata.csv') as f:
	data = [Reading(r) for r in csv.DictReader(f)]

# if the file is garbage, just keep the old output
if len(data) < 4:
	raise SystemExit(0)

# find mean and covariance
stats = {}
key_func = lambda e: e.actual
for t, rs in itertools.groupby(sorted(data, key=key_func), key=key_func):
	rs = np.array([r.c for r in rs])

	mean = np.mean(rs, axis=0)
	cov = np.cov(rs, rowvar=False)

	stats[t] = mean, cov

# output the c file we need
order = ["none", "white", "brown", "cream"]

top_template = '''\
// Autogenerated file
#include "egg_stats.h"

std::array<MultivariateNormal<4>, EGG_TYPE_COUNT> egg_stats::expectations = {{
	{0}
}};
'''

single_template = '''\
// {name}
(MultivariateNormal<4>) {{
	(Matrix<float,4,1>() << {mean}).finished(),
	(Matrix<float,4,4>() << {cov}).finished()
}}'''

text = top_template.format(
	',\n'.join(
		single_template.format(
			mean=', '.join(str(c) for c in stats[name][0]),
			cov=(',\n\t' + ' '*len('(Matrix<float,4,4>() << ')).join(', '.join(str(c) for c in row) for row in stats[name][1]),
			name=name)
		for name in order
	).replace('\n', '\n\t')
)


with open("egg_stats.cc", "w") as f:
	print >> f, text
