from __future__ import division
import csv
import itertools
import math
import numpy as np

# represents one line of the log file
class Reading(object):
	def __init__(self, d):
		self.c = np.array([int(d['r']), int(d['g']), int(d['w'])])
		self.a = int(d['a'])

		self.actual = d['egg']


	def __repr__(self):
		return "<{s.actual} - rgw:{s.c} a:{s.a}>".format(s=self)

	def norm(self):
		return self.c - self.a

# normalized to remove ambient light
class NormReading(object):
	def __init__(self, r=0, g=0, w=0):
		self.r = r
		self.g = g
		self.w = w

	@classmethod
	def of(cls, r):
		return cls(
			r=(r.r - r.a),
			g=(r.g - r.a),
			w=(r.w - r.a)
		)

	def __repr__(self):
		return "<r:{s.r: .3f} g:{s.g: .3f} w:{s.w: .3f}>".format(s=self)



order = ["none", "white", "brown", "cream"]

# load the old file
with open('eggdata.csv') as f:
	data = [Reading(r) for r in csv.DictReader(f)]

if len(data) < 4:
	raise SystemExit(0)

stats = {}

# find mean and variance
# TODO: covariance?
for t, rs in itertools.groupby(data, key=lambda e: e.actual):
	rs = np.array([r.norm() for r in rs])

	mean = np.mean(rs, axis=0)
	mean_sq = np.mean(rs*rs)

	cov = np.cov(rs, rowvar=False)

	print t, mean, cov

	stats[t] = (mean, cov)

# output the c file we need
top_template = '''\
// Autogenerated file
#include "egg_stats.h"

using namespace egg_stats;

MultivariateNormal<3> egg_stats::expectations[EGG_TYPE_COUNT] = {{
	{0}
}};
'''

single_template = '''\
// {name}
(MultivariateNormal<3>) {{
	(Matrix<float,3,1>() << {mean}).finished(),
	(Matrix<float,3,3>() << {cov}).finished()
}}'''

text = top_template.format(
	',\n'.join(
		single_template.format(
			mean=', '.join(str(c) for c in stats[name][0]),
			cov=(',\n\t' + ' '*len('(Matrix<float,3,3>() << ')).join(', '.join(str(c) for c in row) for row in stats[name][1]),
			name=name)
		for name in order
	).replace('\n', '\n\t')
)


with open("egg_stats.cc", "w") as f:
	print >> f, text
